EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Contador.exe -- emu8086 assembler version: 4.08  
 
[ 29/09/2021  --  8:29:13 a. m. ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;--------------------------------------------------------
[   2]        :                                       ;Universidad Pedagogica y Tecnologica de Colombia UPTC
[   3]        :                                       ;Facultad Seccional Sogamoso
[   4]        :                                       ;Escuela de Ingenieria Electronica
[   5]        :                                       ;--------------------------------------------------------
[   6]        :                                       ;Microprocessors Course
[   7]        :                                       ;Description: Example of the use of processes,
[   8]        :                                       ;             subroutines calling and peripherals handling
[   9]        :                                       ;             in assembler for Intel x86
[  10]        :                                       ;Author:      Wilson Javier Perez Holguin
[  11]        :                                       ;Date:        21-07-2020	v1
[  12]        :                                       ;			  03-03-2021	v2
[  13]        :                                       ;--------------------------------------------------------
[  14]        :                                       
[  15]        :                                       DATA   SEGMENT PARA PUBLIC 'DATA'
[  16]    0000: 00 00 00 00                           	number 	DB  0,0,0,0
[  17]    0004: 3F 3F 3F 3F                           	show    DB  3FH,3FH,3FH,3FH
[  18]    0008: 3F 06 5B 4F 66 6D 7D 07 7F 67         	cod7seg DB  3FH,06H,5BH,4FH,66H,6DH,7DH,07H,7FH,67H  ; 7 SEGMENT CODES FOR NUMBERS 0 TO 9
[  19]    0012: 00                                    	get_key DB  ?
[  20]    0013: 00                                    	key     DB  ?
[  21]        :                                       
[  22]        :                                       	;  BCD     7-Seg
[  23]        :                                       	; Digit     Code
[  24]        :                                       	;	0		3FH
[  25]        :                                       	; 	1		06H
[  26]        :                                       	; 	2		5BH
[  27]        :                                       	; 	3		4FH
[  28]        :                                       	; 	4		66H
[  29]        :                                       	; 	5		6DH
[  30]        :                                       	; 	6		7DH
[  31]        :                                       	; 	7		07H
[  32]        :                                       	; 	8		7FH
[  33]        :                                       	; 	9		67H
[  34]        :                                       DATA    ENDS
[  35]        :                                       
[  36]        :                                       
[  37]        :                                       STACK   SEGMENT PARA STACK 'STACK'
[  38]    0020: 40                                    DB      64 DUP ?
[  39]        :                                       STACK   ENDS
[  40]        :                                       
[  41]        :                                       
[  42]        :                                       CODE    SEGMENT PUBLIC 'CODE'
[  43]        :                                       ASSUME CS:CODE, DS:DATA, SS:STACK, ES:DATA
[  44]        :                                       		
[  45]    0030:                                       MAIN    PROC NEAR
[  46]    0030:                                       START:
[  47]    0030: B8 00 00                              		mov ax,@DATA
[  48]    0033: 8E D8                                 		mov ds,ax
[  49]        :                                       		
[  50]        :                                       		;PPI Initialization
[  51]    0035: BA 06 02                              		mov dx,0206h     ; REG CONTROL
[  52]    0038: B0 81                                 		mov al,81h       ; PTOA OUT     PTOB OUT    PTOC(L) IN      PTOC(H) OUT
[  53]    003A: EE                                    		out dx,al
[  54]        :                                       		
[  55]    003B:                                       cycle:  ;Main cycle
[  56]    003B: E8 0C 00                              call CONV7SEG
[  57]    003E: E8 1C 00                              call PRINTD
[  58]    0041: E8 4F 00                              call CONTA
[  59]    0044: E8 95 00                              call DELAY
[  60]    0047: EB F2                                 jmp  cycle
[  61]        :                                       		
[  62]        :                                       		;Return to another subroutine or to OS
[  63]    0049: C3                                    ret
[  64]        :                                       MAIN    ENDP
[  65]        :                                       
[  66]        :                                       
[  67]        :                                       
[  68]    004A:                                       CONV7SEG PROC NEAR USES BX SI
[  69]        :                                       ;push bx
[  70]        :                                       ;push si
[  71]    004A: BE 00 00                              mov  si,0
[  72]    004D: BB 08 00                              lea  bx,cod7seg     ;Start address of 7-Seg code table
[  73]    0050:                                       cyclecv:
[  74]    0050: 8A 04                                 mov  al,number[si]  ;Reading the number to be translated
[  75]    0052: D7                                    xlat                ;BCD to 7-Seg translation
[  76]    0053: 88 44 04                              mov  show[si],al    ;Writing the translated number
[  77]    0056: 46                                    inc  si
[  78]    0057: 83 FE 04                              cmp  si,4
[  79]    005A: 75 F4                                 jne  cyclecv
[  80]        :                                       ;pop  si
[  81]        :                                       ;pop  bx
[  82]    005C: C3                                    ret
[  83]        :                                       CONV7SEG ENDP
[  84]        :                                       
[  85]        :                                       
[  86]    005D:                                       PRINTD  PROC NEAR
[  87]        :                                       ;Process to print on the 7-Seg display
[  88]    005D: B3 FE                                 mov bl,0FEh         ;Strobe init value   1111_1110
[  89]    005F: BE 00 00                              		mov si,0
[  90]    0062:                                       cyclepr:
[  91]        :                                       		;LIGHTS ON SUBROUTUNE
[  92]    0062: BA 02 02                              		mov dx,0202h        ;PTOB
[  93]    0065: 8A 44 04                              		mov al,show[si]     ;Reading the number to show
[  94]    0068: EE                                    		out dx,al
[  95]        :                                       
[  96]    0069: BA 00 02                              		mov dx,0200h        ;PTOA
[  97]    006C: 8A C3                                 		mov al,bl           ;Strobe
[  98]    006E: EE                                    		out dx,al
[  99]        :                                       		
[ 100]        :                                       		
[ 101]        :                                       		;SUBROUTINE FOR GETTING THE KEYBOARD CODE
[ 102]    006F: D0 E0 D0 E0 D0 E0 D0 E0               		shl al,4
[ 103]    0077: A2 12 00                              		mov get_key,al
[ 104]        :                                       		
[ 105]    007A: BA 04 02                              		mov dx,0204h        ;get_key <= PTOC(L)
[ 106]    007D: EC                                    		in  al,dx
[ 107]    007E: 24 0F                                 		and al,0Fh          ;MASKING WITH 0000_1111
[ 108]    0080: 08 06 12 00                           		or  get_key,al
[ 109]        :                                       		
[ 110]        :                                       		
[ 111]        :                                       		;LIGHTS OFF SUBROUTUNE
[ 112]    0084: BA 00 02                              		mov dx,0200h        ;PTOA
[ 113]    0087: B0 FF                                 		mov al,0FFh         ;ALL DISPLAYS OFF
[ 114]    0089: EE                                    		out dx,al
[ 115]        :                                       		
[ 116]        :                                       		;PREPARE THE NEXT DATA PRINTING
[ 117]    008A: D0 C3                                 		rol bl,1
[ 118]    008C: 46                                    	    inc si
[ 119]    008D: 83 FE 04                              		cmp si,4
[ 120]    0090: 75 D0                                 		jne cyclepr
[ 121]    0092: C3                                    		ret
[ 122]        :                                       PRINTD  ENDP
[ 123]        :                                       
[ 124]        :                                       
[ 125]    0093:                                       CONTA   PROC NEAR
[ 126]        :                                       ;COUNTING SUBROUTINE
[ 127]    0093: FE 06 03 00                           inc number[3]
[ 128]    0097: 80 3E 03 00 0A                        cmp number[3],10
[ 129]    009C: 74 02                                 je  inc_tens
[ 130]    009E: EB 3B                                 jmp go_back
[ 131]    00A0:                                       inc_tens:
[ 132]    00A0: C6 06 03 00 00                        mov number[3],0
[ 133]    00A5: FE 06 02 00                           inc number[2]
[ 134]    00A9: 80 3E 02 00 0A                        cmp number[2],10
[ 135]    00AE: 74 02                                 je  inc_hund
[ 136]    00B0: EB 29                                 jmp go_back
[ 137]    00B2:                                       inc_hund:
[ 138]    00B2: C6 06 02 00 00                        mov number[2],0
[ 139]    00B7: FE 06 01 00                           inc number[1]
[ 140]    00BB: 80 3E 01 00 0A                        cmp number[1],10
[ 141]    00C0: 74 02                                 je  inc_thou
[ 142]    00C2: EB 17                                 jmp go_back
[ 143]    00C4:                                       inc_thou:
[ 144]    00C4: C6 06 01 00 00                        mov number[1],0
[ 145]    00C9: FE 06 00 00                           inc number[0]
[ 146]    00CD: 80 3E 00 00 0A                        cmp number[0],10
[ 147]    00D2: 74 02                                 je  rst_thou
[ 148]    00D4: EB 05                                 jmp go_back
[ 149]    00D6:                                       rst_thou:
[ 150]    00D6: C6 06 01 00 00                        mov number[1],0
[ 151]    00DB:                                       go_back:
[ 152]    00DB: C3                                    ret
[ 153]        :                                       CONTA   ENDP
[ 154]        :                                       
[ 155]    00DC:                                       DELAY   PROC NEAR
[ 156]        :                                       ;Delay process
[ 157]    00DC: B9 B8 0B                              mov cx,3000
[ 158]    00DF: E2 FE                                 loop $
[ 159]    00E1: C3                                    ret
[ 160]        :                                       DELAY   ENDP
[ 161]        :                                       
[ 162]        :                                       
[ 163]        :                                       
[ 164]        :                                       CODE    ENDS
[ 165]        :                                       
[ 166]        :                                       END START
[ 167]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: E2      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 02      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 01      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 2F      -   check sum (l.byte)
0013: 04      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 03      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 03      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
